#-*-mode: Shell-script; coding: utf-8;-*-

# zsh specific aliases
alias -g silent="> /dev/null 2>&1"
alias -g noerr="2> /dev/null"
alias -g stdboth="2>&1"

# simplify things
alias a=ack
alias c=cd
alias n=noglob
alias l=ls
alias L='ls -dal'
alias tl='tmux ls'


# Keybindings, what few there are.
bindkey -v
bindkey '^P' push-line # Saves the current line and returns to it afterwards.

# General history options
export HISTSIZE=5000
export SAVEHIST=4900
export HISTFILE=~/.zsh_history

setopt append_history
setopt extended_history
setopt hist_reduce_blanks
setopt hist_no_store
setopt hist_ignore_dups
setopt no_hist_beep
setopt no_list_beep
setopt share_history
setopt inc_append_history
setopt auto_menu
setopt bash_auto_list

# Options that don't need to be set.
unsetopt bad_pattern # No, don't warn me on bad file patterns kthxbai.

# The rest of the story (tm) (c) (r) in option settings.
setopt equals
setopt notify
setopt auto_cd
setopt glob_dots
setopt print_exit_value # I love you zsh for this, print out non zero exits.

autoload -U colors && colors

function other_term
{
  case $TERM in
  *xterm*|*rxvt*|(dt|k|e)term)
    print -Pn "\e]2;%~\a"
    ;;
  sun-cmd)
    print -Pn "\e]l%~\e\\"
    ;;
  *)
    ;;
  esac
}

# set xterm/whatever titlebar to our pwd, one more thing bash doesn't have.
chpwd() {
  [[ -o interactive ]] || return
  case $TERM in
  eterm-color)
    print -Pn ""
    ;;
  *)
    if [[ $SSH_TTY != '' ]]; then
      case $ORIG_TERM in
      eterm-color)
        print -Pn ""
        ;;
      *)
        other_term
        ;;
      esac
    fi
    ;;
  esac
}

# Non ancient zsh version setup, stupid aix.

if [[ "$ZSH_VERSION" == (3.1|4)* ]]; then
  # completion setup

  zstyle ':completion:*' squeeze-slashes true
  zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
  zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
  zstyle ':completion:*:*:*:*:processes' force-list always

  # No need to setup ssh known host parsing as root, just regular users.
  # This is pretty old using compctl, need to update eventually.

  if [[ "$LOGNAME" != "root" ]]; then
    zmodload zsh/mathfunc
    if [[ -f "$HOME/.ssh/known_hosts" ]]; then
      hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[0-9]*}%%\ *}%%,*})
      zstyle ':completion:*:(ssh|scp|cssh):*' hosts $hosts
      zstyle ':completion:*:*:*:hosts-host' ignored-patterns '|1|*' loopback localhost
    fi
    zstyle ':completion:::complete*' use-cache 1

    # This really should be closer to the definition of extract.
    compctl -g '*.tar.bz2 *.tbz2 *.tbz *.tar.gz *.tgz *.bz2 *.gz *.jar *.zip *.rar *.tar *.Z *.tZ *.tar.Z' + -g '*(-/)' extract
  fi

  # More history options for newer zsh versions

  setopt share_history
  setopt hist_save_no_dups
  setopt hist_find_no_dups
  setopt hist_no_functions
  setopt hist_expire_dups_first

  # Custom overrides if needed.

  if [[ -d $HOME/.zsh ]]; then
    fpath+=($HOME/.zsh/my-functions)
    fpath+=($HOME/.zsh/site-functions)
  fi

  bindkey ' ' magic-space # Complete spaces too dammit, i'm lazy.

  alias edirs='ls -d **/*(/^F)' # empty directories
  zstyle ':completion:*:*:kill:*' menu yes select
  zstyle ':completion:*:kill:*' force-list always
  zstyle ':completion:*:kill:*:processes' command "ps x"
  zstyle ':completion:*' menu select=2

  autoload -U compinit
fi

bindkey -e

prefix=${prefix:=$HOME}
if [[ $USER == 'mitch' ]]; then
  prefix=$HOME . $HOME/gits/github.com/mitchty/src/funcs/sourceme
  autoload -U compinit && compinit
else
  . $HOME/gits/github.com/mitchty/src/funcs/sourceme
fi

function sr {
  zomgwho='root'
  if [[ -n $1 ]]; then
    zomgwho=$1
  fi
  sudo su - $zomgwho -c "env SHELL=$SHELL ZDOTDIR=$HOME prefix=$HOME $SHELL -l -i"
}

cd $HOME
PS1="$(ps1)"

function git_ps1 {
  git status > /dev/null 2>&1
  if [[ $? != 128 ]]; then
    gitstatus=$(git status)
    branch=$(git branch | grep \* | awk '{print $2}')
    needspush=''
    needssaving=''
    echo $gitstatus | grep 'branch is ahead of' > /dev/null 2>&1
    [[ $? == 0 ]] && needspush=':P'
    echo $gitstatus | grep 'nothing to commit' > /dev/null 2>&1
    [[ $? != 0 ]] && needssaving='*'

    PS1="$branch$needspush$needssaving:$(ps1)"
  else
    PS1="$(ps1)"
  fi
}

preexec_functions+='git_ps1'
precmd_functions+='git_ps1'
chpwd_functions+='git_ps1'
